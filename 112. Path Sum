# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution(object):
    def hasPathSum(self, root, targetSum):
        """
        if not root and targetSum is not 0:
            return false 
        if root.val == targetSume:
            return true 
        if not root.left and root right 
            returnn hasPathSum(self, root right, targetSum - root.val)
        
        if root.left and not root right 
            returnn hasPathSum(self, root left , targetSum - root.val)
        
       returnn hasPathSum(self, root left , targetSum - root.val) or hasPathSum(self, root left , targetSum - root.val)
        """

        if not root:
            return False 
        if root.val == targetSum and not root.left and not root.right:
            return True 
        if not root.left and root.right:
            return self.hasPathSum(root.right, targetSum - root.val)
        elif root.left and not root.right:
            return self.hasPathSum(root.left , targetSum - root.val)
        else:
            return self.hasPathSum(root.left , targetSum - root.val) or self.hasPathSum(root.right , targetSum - root.val)
        
