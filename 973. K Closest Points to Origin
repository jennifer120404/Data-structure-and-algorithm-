class Solution(object):
    def kClosest(self, points, k):
        """
        heapq
        for every opoint in the points:
            calculate the distance
            if the lengh of heapq is larger than k > the longest copr and:
                pop the quese and add the new corr and sum
            else 
                add the corr and sum to the heapd 
        return heapq 
            
        """
        max_heap = []
        for x, y in points:
            dist = -(x*x + y*y)
            if len(max_heap) < k:
                heapq.heappush(max_heap, (dist, x, y))
            elif dist > max_heap[0][0]:
                heapq.heappushpop(max_heap, (dist, x, y))
        return [[x, y] for dist, x, y in max_heap]
