# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution(object):
    def rightSideView(self, root):
        """
        BFS
        create a result list 
        create a queue 
        the quque is not empyth:
            set a var for right mpde 
            and keep the len so it can search level by leve 
            in range of the length :
                pop the left of the queue 
                and if the node exist 
                remember the left mode and append left and right node
            if the the right side exist add to result 
        return the result if 

        """
        res= []
        q= collections.deque([root])
        while q:
            rightside = None
            qlen = len(q)
            for i in range(qlen):
                node = q.popleft()
                if node:
                    rightside = node 
                    q.append(node.left)
                    q.append(node.right)
            if rightside:
                res.append(rightside.val)
        return res
