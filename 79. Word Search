class Solution(object):
    def exist(self, board, word):
        """
        have var for row and col
        create a path set to keep track of all the element that went through 

        create dfs function with row col and i inputs 
            if i == len(word) which we find the word:
                return True 
            if( r or c put of bound or found the wrong charater or already went through the element )
        
            add the pair of c and r to path 
            run dfs with all four side 

            loop row and col through dfs return true if recurvise return true else false 

            
        """
        rows = len(board)
        cols = len(board[0])
        path = set()

        def dfs(r, c, i):
            if i == len(word):
                return True 
            if (r < 0 or c < 0 or r >= rows or c >= cols or word[i] != board[r][c] or (r, c) in path):
                return False 
            path.add((r, c))
            res = (dfs(r + 1, c, i + 1) or
                   dfs(r - 1, c, i + 1) or
                   dfs(r, c + 1, i + 1) or
                   dfs(r, c - 1, i + 1))
            path.remove((r, c))
            return res

        for r in range(rows):
            for c in range(cols):
                if dfs(r, c, 0):
                    return True
        return False
